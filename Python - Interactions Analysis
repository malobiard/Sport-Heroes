{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "1eJIPL6fD4Dw",
        "oh8rhjKPD8qn",
        "4br0NqpqFMX2",
        "eTlYbybWo8cV",
        "zTyYDaBnwE40",
        "KKKYwFsM4vTJ",
        "h179q7tPEKCP",
        "NZr2Vp175k1U",
        "PbTIzEqGq9eC",
        "Vo6qz14wyAQu",
        "j5CJKVnpET35",
        "8AyKAuNHwlWh"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Import des bibliothèques utiles"
      ],
      "metadata": {
        "id": "1eJIPL6fD4Dw"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "r7MvZfwPDi2C"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from google.colab import files\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from datetime import datetime, timedelta\n",
        "from dateutil.relativedelta import relativedelta\n",
        "from scipy.stats import linregress"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Import des datasets"
      ],
      "metadata": {
        "id": "oh8rhjKPD8qn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# All interactions\n",
        "df_all_interactions = pd.read_csv(\"/content/Copy of MessageAnalysis - Dataset compilation - All interactions.csv\")\n",
        "df_all_interactions_bis = df_all_interactions.copy()\n",
        "# Users\n",
        "df_users = pd.read_csv(\"/content/Copy of MessageAnalysis - Dataset compilation - Users bis.csv\")\n",
        "df_users_bis = df_users.copy()\n",
        "# Users per group\n",
        "df_users_per_group = pd.read_csv(\"/content/Copy of MessageAnalysis - Dataset compilation - users per groups.csv\")\n",
        "df_users_per_group_bis = df_users_per_group.copy()\n",
        "# Users per tribe\n",
        "df_users_per_tribe = pd.read_csv(\"/content/Copy of MessageAnalysis - Dataset compilation - users per tribe.csv\")\n",
        "df_users_per_tribe_bis = df_users_per_tribe.copy()\n",
        "# Companies\n",
        "df_companies = pd.read_csv(\"/content/Copy of MessageAnalysis - Dataset compilation - companies data.csv\")\n",
        "df_companies_bis = df_companies.copy()"
      ],
      "metadata": {
        "id": "njGy4Ve7D8yv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualisation des datasets"
      ],
      "metadata": {
        "id": "4br0NqpqFMX2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "*5 premières lignes*"
      ],
      "metadata": {
        "id": "D3lYiC_iGq78"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test.head()"
      ],
      "metadata": {
        "id": "8oPACg_BFMiz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Tout le dataset*"
      ],
      "metadata": {
        "id": "AFK8oqgXGySD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_users_per_group_test)"
      ],
      "metadata": {
        "id": "Hr9TYMb4FTU-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Affiche des informations sur les données d'un dataframe, telles que le nombre de valeurs non nulles, le type de données de chaque colonne, etc.*"
      ],
      "metadata": {
        "id": "zKXg0RttG7B8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test.info()"
      ],
      "metadata": {
        "id": "e0f26S5XFyvw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*fournit des statistiques descriptives sur les colonnes numériques d'un dataframe, telles que la moyenne, l'écart-type, les quartiles, etc.*"
      ],
      "metadata": {
        "id": "Xg05T74FHBB1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test.describe()"
      ],
      "metadata": {
        "id": "E_qhoQ-JF6Zi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Dimensions du dataset*"
      ],
      "metadata": {
        "id": "VsDlvbxjHIT6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test.shape"
      ],
      "metadata": {
        "id": "4pE3DG-fF8pA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Colonnes du dataset*"
      ],
      "metadata": {
        "id": "VLxvZM-qHL5s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test.columns"
      ],
      "metadata": {
        "id": "vi53pjvdGc7G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Nombre de fois qu'une valeur apparaît dans une colonne*"
      ],
      "metadata": {
        "id": "aFSGKho0pKkw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test[\"Name\"].value_counts()[\"No_data\"]/df_users_per_group_test.shape[0]"
      ],
      "metadata": {
        "id": "Pw-0v1k4pJxA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Nombre de valeurs nulles par colonne*"
      ],
      "metadata": {
        "id": "x1kI1_EGHPqL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#df_users_per_tribe_test.isnull().sum()\n",
        "df_users_per_tribe_test.shape\n",
        "#df_users_per_tribe_test['level_0_id'].value_counts()['no_level_0_found']"
      ],
      "metadata": {
        "id": "rSCbySkHGf-_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Visualisation d'une ligne en particulier*"
      ],
      "metadata": {
        "id": "1tZ5nbywOHM6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test.iloc[85]"
      ],
      "metadata": {
        "id": "r8O918b4OHTi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Formatage des datasets (type, colonnes etc)"
      ],
      "metadata": {
        "id": "eTlYbybWo8cV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# All interactions\n",
        "df_all_interactions_bis = df_all_interactions_bis.assign(group_id=pd.Series([None]*len(df_all_interactions_bis)), level_0_id=pd.Series([None]*len(df_all_interactions_bis)))\n",
        "df_all_interactions_bis['Date'] = pd.to_datetime(df_all_interactions_bis['Date'])\n",
        "df_all_interactions_bis['year_month'] = pd.to_datetime(df_all_interactions_bis['year_month'])\n",
        "# Users\n",
        "df_users_bis['deleted_at'] = df_users_bis['deleted_at'].fillna('2100-01-01')\n",
        "df_users_bis['deleted_at'] = pd.to_datetime(df_users_bis['deleted_at'])\n",
        "df_users_bis['created_at'] = pd.to_datetime(df_users_bis['created_at'])\n",
        "# Users per group\n",
        "df_users_per_group_bis['year_month'] = pd.to_datetime(df_users_per_group_bis['year_month'])\n",
        "# Users per tribe\n",
        "df_users_per_tribe_bis['year_month'] = pd.to_datetime(df_users_per_tribe_bis['year_month'])"
      ],
      "metadata": {
        "id": "2XAjOtDxo84O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Attribution d'un group_id et d'un level_0_id à chaque interaction"
      ],
      "metadata": {
        "id": "zTyYDaBnwE40"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Recherche du group_id correspondant à chaque interaction\n",
        "def get_group_id(user_id, date):\n",
        "    user_rows = df_users_bis[df_users_bis[\"user_id\"] == user_id]\n",
        "    if len(user_rows) == 0:\n",
        "        return \"no_group_found\"\n",
        "    elif len(user_rows) == 1:\n",
        "        row = user_rows.iloc[0]\n",
        "        if row[\"created_at\"] <= date and row[\"deleted_at\"] >= date:\n",
        "            return row[\"lowest_level_id\"]\n",
        "        else:\n",
        "            return \"no_group_found\"\n",
        "    else:\n",
        "        valid_rows = user_rows[(user_rows[\"created_at\"] <= date) & ((user_rows[\"deleted_at\"] >= date) | (user_rows[\"deleted_at\"] == \"2100-01-01\"))]\n",
        "        if len(valid_rows) == 0:\n",
        "            return \"no_group_found\"\n",
        "        else:\n",
        "            durations = pd.to_datetime(valid_rows[\"deleted_at\"]) - pd.to_datetime(valid_rows[\"created_at\"])\n",
        "            idx = np.argmax(durations)\n",
        "            return valid_rows.iloc[idx][\"lowest_level_id\"]\n",
        "\n",
        "# Application de la fonction à chaque interaction\n",
        "df_all_interactions_bis[\"group_id\"] = df_all_interactions_bis.apply(lambda x: get_group_id(x[\"Distinct ID\"], x[\"Date\"]), axis=1)"
      ],
      "metadata": {
        "id": "PtuZ9InnwEAJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Recherche du level_0_id correspondant à chaque interaction\n",
        "def get_level_0_id(group_id):\n",
        "    if group_id == 'no_group_found':\n",
        "        return \"no_level_0_found\"\n",
        "    else :\n",
        "      group_rows = df_users_per_group_bis[df_users_per_group_bis[\"lowest_level_id\"] == group_id]\n",
        "      if len(group_rows) == 0 :\n",
        "        return \"no_level_0_found\"\n",
        "      else :\n",
        "        row = group_rows.iloc[0]\n",
        "        return row[\"level_0_id\"]\n",
        "\n",
        "    #else :\n",
        "    #  group_rows = df_users_per_group_bis[df_users_per_group_bis[\"lowest_level_id\"] == level_0_id]\n",
        "    #  if len(group_rows) == 0:\n",
        "    #      return \"no_level_0_found\"\n",
        "    #  else:\n",
        "    #      row = group_rows.iloc[0]\n",
        "    #      return row[\"level_0_id\"]\n",
        "\n",
        "# Application de la fonction à chaque interaction\n",
        "df_all_interactions_bis[\"level_0_id\"] = df_all_interactions_bis.apply(lambda x: get_level_0_id(x[\"group_id\"]), axis=1)"
      ],
      "metadata": {
        "id": "M8cT0h-Ovg6f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Recherche du level_0_id correspondant à chaque tribe\n",
        "def level_0_tribe(tribe_id) :\n",
        "  tribe_rows = df_all_interactions_bis[df_all_interactions_bis[\"tribeId\"] == tribe_id]\n",
        "  if len(tribe_rows) == 0 :\n",
        "    return \"no_level_0_found\"\n",
        "  else :\n",
        "    for i in range (tribe_rows.shape[0]):\n",
        "      if tribe_rows.iloc[i,8] == \"no_level_0_found\" :\n",
        "        i=i+1\n",
        "      else :\n",
        "        return tribe_rows.iloc[i,8]\n",
        "    return \"no_level_0_found\"\n",
        "df_users_per_tribe_bis[\"level_0_id\"] = df_users_per_tribe_bis.apply(lambda x : level_0_tribe(x[\"tribeId\"]), axis=1)"
      ],
      "metadata": {
        "id": "D2IQmgYUq0PX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Copie des dataframes afin d'éviter des temps d'exécution trop longs"
      ],
      "metadata": {
        "id": "KKKYwFsM4vTJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"# On télécharge carrément les résultats ici, ainsi plus besoin d'exécuter la 1ère partie du code, à moins que l'on change le dataset\n",
        "df_all_interactions_bis.to_csv('to_analyse_interactions.csv', index=False)\n",
        "df_users_per_group_bis.to_csv('to_analyse_groups.csv', index=False)\n",
        "df_users_per_tribe_bis.to_csv('to_analyse_tribes.csv', index=False)\n",
        "df_companies_bis.to_csv('to_analyse_companies.csv', index=False)\n",
        "files.download('to_analyse_interactions.csv')\n",
        "files.download('to_analyse_groups.csv')\n",
        "files.download('to_analyse_tribes.csv')\n",
        "files.download('to_analyse_companies.csv')\"\"\""
      ],
      "metadata": {
        "id": "_kQiRf87ryNB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# On ouvre les csv (qui sont donc à ajouter à l'environnement de travail au préalable)\n",
        "df_all_interactions_test = pd.read_csv(\"/content/to_analyse_interactions.csv\")\n",
        "df_users_per_group_test = pd.read_csv(\"/content/to_analyse_groups.csv\")\n",
        "df_users_per_tribe_test = pd.read_csv(\"/content/to_analyse_tribes.csv\")\n",
        "df_companies_test = pd.read_csv(\"/content/to_analyse_companies.csv\")"
      ],
      "metadata": {
        "id": "qKymV4js4vly"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# On ajoute les informations de l'entreprise pour chaque groupe\n",
        "df_merged = pd.merge(df_users_per_group_test, df_companies_test, how='left', left_on='level_0_id', right_on='Id')\n",
        "# On remplace les valeurs manquantes par \"No_data\"\n",
        "df_merged.fillna(\"No_data\", inplace=True)\n",
        "# On supprime la colonne en double\n",
        "df_merged.drop(['Id'], axis=1, inplace=True)\n",
        "df_users_per_group_test = df_merged.copy()\n",
        "\n",
        "# Pareil pour les clubs\n",
        "df_merged = pd.merge(df_users_per_tribe_test, df_companies_test, how='left', left_on='level_0_id', right_on='Id')\n",
        "# On remplace les valeurs manquantes par \"No_data\"\n",
        "df_merged.fillna(\"No_data\", inplace=True)\n",
        "# On supprime la colonne en double\n",
        "df_merged.drop(['Id'], axis=1, inplace=True)\n",
        "df_users_per_tribe_test = df_merged.copy()"
      ],
      "metadata": {
        "id": "vo-16qDSmPOW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Comptage du nombre d'interactions, pour chaque groupe et pour chaque mois"
      ],
      "metadata": {
        "id": "h179q7tPEKCP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout de toutes les interactions*"
      ],
      "metadata": {
        "id": "Hr0nEVg6vx83"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'group'\n",
        "df_all_interactions_group = df_all_interactions_test.query(\"feedType == 'group'\")\n",
        "\n",
        "# Regrouper les interactions par groupe et mois, et compter le nombre d'interactions pour chaque groupe et mois\n",
        "interactions_per_group_month = df_all_interactions_group.groupby(['group_id', 'year_month']).size().reset_index(name='interactions_per_month')\n",
        "\n",
        "# Fusionner les données des interactions par groupe et mois dans le dataframe des utilisateurs par groupe et mois\n",
        "df_users_per_group_test = pd.merge(df_users_per_group_test, interactions_per_group_month, how='left', left_on=['lowest_level_id', 'year_month'], right_on=['group_id', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_group_test['interactions_per_month'] = df_users_per_group_test['interactions_per_month'].fillna(0)\n",
        "\n",
        "# Supprimer la colonne 'group_id'\n",
        "df_users_per_group_test = df_users_per_group_test.drop('group_id', axis=1)"
      ],
      "metadata": {
        "id": "JijSNbIREKSI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout des posts*"
      ],
      "metadata": {
        "id": "iwWLjRXWwBTa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'group' & 'interactionType est 'post'\n",
        "df_all_posts_group = df_all_interactions_test.query(\"feedType == 'group' & interactionType == 'post'\")\n",
        "\n",
        "# Regrouper les posts par groupe et mois, et compter le nombre de posts pour chaque groupe et mois\n",
        "posts_per_group_month = df_all_posts_group.groupby(['group_id', 'year_month']).size().reset_index(name='posts_per_month')\n",
        "\n",
        "# Fusionner les données des posts par groupe et mois dans le dataframe des utilisateurs par groupe et mois\n",
        "df_users_per_group_test = pd.merge(df_users_per_group_test, posts_per_group_month, how='left', left_on=['lowest_level_id', 'year_month'], right_on=['group_id', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_group_test['posts_per_month'] = df_users_per_group_test['posts_per_month'].fillna(0)\n",
        "\n",
        "# Supprimer la colonne 'group_id'\n",
        "df_users_per_group_test = df_users_per_group_test.drop('group_id', axis=1)"
      ],
      "metadata": {
        "id": "0mapbsctQpgO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout des commentaires*"
      ],
      "metadata": {
        "id": "4ZDKtJx-wFOT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'group' & 'interactionType est 'comment'\n",
        "df_all_comments_group = df_all_interactions_test.query(\"feedType == 'group' & interactionType == 'comment'\")\n",
        "\n",
        "# Regrouper les comments par groupe et mois, et compter le nombre de comments pour chaque groupe et mois\n",
        "comments_per_group_month = df_all_comments_group.groupby(['group_id', 'year_month']).size().reset_index(name='comments_per_month')\n",
        "\n",
        "# Fusionner les données des comments par groupe et mois dans le dataframe des utilisateurs par groupe et mois\n",
        "df_users_per_group_test = pd.merge(df_users_per_group_test, comments_per_group_month, how='left', left_on=['lowest_level_id', 'year_month'], right_on=['group_id', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_group_test['comments_per_month'] = df_users_per_group_test['comments_per_month'].fillna(0)\n",
        "\n",
        "# Supprimer la colonne 'group_id'\n",
        "df_users_per_group_test = df_users_per_group_test.drop('group_id', axis=1)"
      ],
      "metadata": {
        "id": "LAdm_FpYtSTF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout des réactions*"
      ],
      "metadata": {
        "id": "9wL_BZ6LwHD9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'group' & 'interactionType est 'reaction'\n",
        "df_all_reactions_group = df_all_interactions_test.query(\"feedType == 'group' & interactionType == 'reaction'\")\n",
        "\n",
        "# Regrouper les reactions par groupe et mois, et compter le nombre de reactions pour chaque groupe et mois\n",
        "reactions_per_group_month = df_all_reactions_group.groupby(['group_id', 'year_month']).size().reset_index(name='reactions_per_month')\n",
        "\n",
        "# Fusionner les données des reactions par groupe et mois dans le dataframe des utilisateurs par groupe et mois\n",
        "df_users_per_group_test = pd.merge(df_users_per_group_test, reactions_per_group_month, how='left', left_on=['lowest_level_id', 'year_month'], right_on=['group_id', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_group_test['reactions_per_month'] = df_users_per_group_test['reactions_per_month'].fillna(0)\n",
        "\n",
        "# Supprimer la colonne 'group_id'\n",
        "df_users_per_group_test = df_users_per_group_test.drop('group_id', axis=1)"
      ],
      "metadata": {
        "id": "Bpt91kDfu_F1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout du pourcentage de membres interagissant*"
      ],
      "metadata": {
        "id": "WAjphYUD-HLv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'group'\n",
        "df_all_interactions_group = df_all_interactions_test.query(\"feedType == 'group'\")\n",
        "\n",
        "# Regrouper les interagisseurs par groupe et mois, et compter leur nombre pour chaque groupe et mois\n",
        "interactors_per_group_month = df_all_interactions_group.groupby(['group_id', 'year_month'])['Distinct ID'].nunique().reset_index(name='distinct_users_per_month')\n",
        "\n",
        "# Fusionner les données des interagisseurs par groupe et mois dans le dataframe des utilisateurs par groupe et mois\n",
        "df_users_per_group_test = pd.merge(df_users_per_group_test, interactors_per_group_month, how='left', left_on=['lowest_level_id', 'year_month'], right_on=['group_id', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_group_test['distinct_users_per_month'] = df_users_per_group_test['distinct_users_per_month'].fillna(0)\n",
        "\n",
        "# Supprimer la colonne 'group_id'\n",
        "df_users_per_group_test = df_users_per_group_test.drop('group_id', axis=1)\n",
        "\n",
        "# Créer une fonction qui calcule le pourcentage de distinct_users_per_month par rapport à registered, arrondi à 1 chiffre après la virgule\n",
        "def calculate_percentage(row):\n",
        "    if row['registered'] == 0:\n",
        "        return 0.0\n",
        "    else:\n",
        "        return round(row['distinct_users_per_month'] / row['registered'] * 100, 1)\n",
        "\n",
        "# Appliquer la fonction à chaque ligne du dataframe\n",
        "df_users_per_group_test['distinct_users_per_month'] = df_users_per_group_test.apply(calculate_percentage, axis=1)"
      ],
      "metadata": {
        "id": "h0srJfZo-HVC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout du nombre d'utilisateurs ayant interagi au moins 2 fois*"
      ],
      "metadata": {
        "id": "a7lu1qzzO0Ra"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_all_interactions_group = df_all_interactions_test[df_all_interactions_test['feedType'] == 'group']\n",
        "users_plus2_interactions_per_group_month = df_all_interactions_group.groupby(['group_id', 'year_month'])['Distinct ID'].apply(lambda x: x[x.duplicated()].unique().size).reset_index(name='users+2_interactions')\n",
        "df_users_per_group_test = pd.merge(df_users_per_group_test, users_plus2_interactions_per_group_month, how='left', left_on=['lowest_level_id', 'year_month'], right_on=['group_id', 'year_month'])\n",
        "df_users_per_group_test['users+2_interactions'] = df_users_per_group_test['users+2_interactions'].fillna(0)\n",
        "df_users_per_group_test = df_users_per_group_test.drop('group_id', axis=1)"
      ],
      "metadata": {
        "id": "F0IF8jvh4VZU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout de l'information permettant de juger si le groupe a été actif pour le mois considéré. La première approche a été la suivante :*\n",
        "\n",
        "*Actif si >=20% utilisateurs interagissant & >=2 utilisateurs interagissant au moins 2 fois.*\n",
        "\n",
        "*La deuxième approche est:*\n",
        "\n",
        "*Actif si >=10% utilisateurs interagissant. C'est avec cette approche que nous allons continuer.*\n"
      ],
      "metadata": {
        "id": "wATubijIx8ut"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#df_users_per_group_test['is_active'] = ((df_users_per_group_test['distinct_users_per_month'] >= 20) & (df_users_per_group_test['users+2_interactions'] >= 2)).astype(int)\n",
        "df_users_per_group_test['is_active'] = (df_users_per_group_test['distinct_users_per_month'] >= 10).astype(int)"
      ],
      "metadata": {
        "id": "UvBzVyaw0N4X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Visualisation d'une ligne dont on connaît les valeurs*"
      ],
      "metadata": {
        "id": "rIFRz-0TwJf7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_users_per_group_test.iloc[73])"
      ],
      "metadata": {
        "id": "6OiAWAY69Nyn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Comptage du nombre d'interactions, pour chaque tribe et pour chaque mois"
      ],
      "metadata": {
        "id": "NZr2Vp175k1U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout de toutes les interactions*"
      ],
      "metadata": {
        "id": "sqZUKkFO5k1a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'tribe'\n",
        "df_all_interactions_tribe = df_all_interactions_test.query(\"feedType == 'tribe'\")\n",
        "\n",
        "# Regrouper les interactions par tribe et mois, et compter le nombre d'interactions pour chaque tribe et mois\n",
        "interactions_per_tribe_month = df_all_interactions_tribe.groupby(['tribeId', 'year_month']).size().reset_index(name='interactions_per_month')\n",
        "\n",
        "# Fusionner les données des interactions par tribe et mois dans le dataframe des utilisateurs par tribe et mois\n",
        "df_users_per_tribe_test = pd.merge(df_users_per_tribe_test, interactions_per_tribe_month, how='left', left_on=['tribeId', 'year_month'], right_on=['tribeId', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_tribe_test['interactions_per_month'] = df_users_per_tribe_test['interactions_per_month'].fillna(0)"
      ],
      "metadata": {
        "id": "wIQexT805k1a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout des posts*"
      ],
      "metadata": {
        "id": "4N8Dq4e95k1b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'tribe' & 'interactionType est 'post'\n",
        "df_all_posts_tribe = df_all_interactions_test.query(\"feedType == 'tribe' & interactionType == 'post'\")\n",
        "\n",
        "# Regrouper les posts par tribe et mois, et compter le nombre de posts pour chaque tribe et mois\n",
        "posts_per_tribe_month = df_all_posts_tribe.groupby(['tribeId', 'year_month']).size().reset_index(name='posts_per_month')\n",
        "\n",
        "# Fusionner les données des posts par tribe et mois dans le dataframe des utilisateurs par tribe et mois\n",
        "df_users_per_tribe_test = pd.merge(df_users_per_tribe_test, posts_per_tribe_month, how='left', left_on=['tribeId', 'year_month'], right_on=['tribeId', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_tribe_test['posts_per_month'] = df_users_per_tribe_test['posts_per_month'].fillna(0)"
      ],
      "metadata": {
        "id": "QaRPYK2b5k1b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout des commentaires*"
      ],
      "metadata": {
        "id": "KgC0kJ985k1b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'tribe' & 'interactionType est 'comment'\n",
        "df_all_comments_tribe = df_all_interactions_test.query(\"feedType == 'tribe' & interactionType == 'comment'\")\n",
        "\n",
        "# Regrouper les comments par tribe et mois, et compter le nombre de comments pour chaque tribe et mois\n",
        "comments_per_tribe_month = df_all_comments_tribe.groupby(['tribeId', 'year_month']).size().reset_index(name='comments_per_month')\n",
        "\n",
        "# Fusionner les données des comments par tribe et mois dans le dataframe des utilisateurs par tribe et mois\n",
        "df_users_per_tribe_test = pd.merge(df_users_per_tribe_test, comments_per_tribe_month, how='left', left_on=['tribeId', 'year_month'], right_on=['tribeId', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_tribe_test['comments_per_month'] = df_users_per_tribe_test['comments_per_month'].fillna(0)"
      ],
      "metadata": {
        "id": "1fmmUqZH5k1b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout des réactions*"
      ],
      "metadata": {
        "id": "_0n3QWF85k1b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'tribe' & 'interactionType est 'reaction'\n",
        "df_all_reactions_tribe = df_all_interactions_test.query(\"feedType == 'tribe' & interactionType == 'reaction'\")\n",
        "\n",
        "# Regrouper les reactions par tribe et mois, et compter le nombre de reactions pour chaque tribe et mois\n",
        "reactions_per_tribe_month = df_all_reactions_tribe.groupby(['tribeId', 'year_month']).size().reset_index(name='reactions_per_month')\n",
        "\n",
        "# Fusionner les données des reactions par tribe et mois dans le dataframe des utilisateurs par tribe et mois\n",
        "df_users_per_tribe_test = pd.merge(df_users_per_tribe_test, reactions_per_tribe_month, how='left', left_on=['tribeId', 'year_month'], right_on=['tribeId', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_tribe_test['reactions_per_month'] = df_users_per_tribe_test['reactions_per_month'].fillna(0)"
      ],
      "metadata": {
        "id": "vq8a18mN5k1b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout du pourcentage de membres interagissant*"
      ],
      "metadata": {
        "id": "hKQnaIbG5k1b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrer les interactions pour lesquelles 'feedType' est 'tribe'\n",
        "df_all_interactions_tribe = df_all_interactions_test.query(\"feedType == 'tribe'\")\n",
        "\n",
        "# Regrouper les interagisseurs par tribe et mois, et compter leur nombre pour chaque tribe et mois\n",
        "interactors_per_tribe_month = df_all_interactions_tribe.groupby(['tribeId', 'year_month'])['Distinct ID'].nunique().reset_index(name='distinct_users_per_month')\n",
        "\n",
        "# Fusionner les données des interagisseurs par tribe et mois dans le dataframe des utilisateurs par tribe et mois\n",
        "df_users_per_tribe_test = pd.merge(df_users_per_tribe_test, interactors_per_tribe_month, how='left', left_on=['tribeId', 'year_month'], right_on=['tribeId', 'year_month'])\n",
        "\n",
        "# Remplacer les valeurs manquantes par 0\n",
        "df_users_per_tribe_test['distinct_users_per_month'] = df_users_per_tribe_test['distinct_users_per_month'].fillna(0)\n",
        "\n",
        "# Créer une fonction qui calcule le pourcentage de distinct_users_per_month par rapport à 'Monthly population for each tribe', arrondi à 1 chiffre après la virgule\n",
        "def calculate_percentage(row):\n",
        "    if row['Monthly population for each tribe'] == 0:\n",
        "        return 0.0\n",
        "    else:\n",
        "        return round(row['distinct_users_per_month'] / row['Monthly population for each tribe'] * 100, 1)\n",
        "\n",
        "# Appliquer la fonction à chaque ligne du dataframe\n",
        "df_users_per_tribe_test['distinct_users_per_month'] = df_users_per_tribe_test.apply(calculate_percentage, axis=1)"
      ],
      "metadata": {
        "id": "k2JjH0Qr5k1b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout du nombre d'utilisateurs ayant interagi au moins 2 fois*"
      ],
      "metadata": {
        "id": "Y_UEYVEe5k1b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_all_interactions_tribe = df_all_interactions_test[df_all_interactions_test['feedType'] == 'tribe']\n",
        "users_plus2_interactions_per_tribe_month = df_all_interactions_tribe.groupby(['tribeId', 'year_month'])['Distinct ID'].apply(lambda x: x[x.duplicated()].unique().size).reset_index(name='users+2_interactions')\n",
        "df_users_per_tribe_test = pd.merge(df_users_per_tribe_test, users_plus2_interactions_per_tribe_month, how='left', left_on=['tribeId', 'year_month'], right_on=['tribeId', 'year_month'])\n",
        "df_users_per_tribe_test['users+2_interactions'] = df_users_per_tribe_test['users+2_interactions'].fillna(0)\n",
        "#df_users_per_tribe_test = df_users_per_group_test.drop('group_id', axis=1)"
      ],
      "metadata": {
        "id": "0169DY6B5k1b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Ajout de l'information permettant de juger si le groupe a été actif pour le mois considéré. La première approche a été la suivante :*\n",
        "\n",
        "*Actif si >=20% utilisateurs interagissant & >=2 utilisateurs interagissant au moins 2 fois.*\n",
        "\n",
        "*La deuxième approche est:*\n",
        "\n",
        "*Actif si >=10% utilisateurs interagissant. C'est avec cette approche que nous allons continuer.*"
      ],
      "metadata": {
        "id": "fQ8CRhWF5k1b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#df_users_per_tribe_test['is_active'] = ((df_users_per_tribe_test['distinct_users_per_month'] >= 20) & (df_users_per_tribe_test['users+2_interactions'] >= 2)).astype(int)\n",
        "df_users_per_tribe_test['is_active'] = (df_users_per_tribe_test['distinct_users_per_month'] >= 10).astype(int)"
      ],
      "metadata": {
        "id": "ur6fGXVO5k1b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Visualisation d'une ligne dont on connaît les valeurs*"
      ],
      "metadata": {
        "id": "Sgl1xBFW5k1c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_users_per_tribe_test.iloc[138])"
      ],
      "metadata": {
        "id": "1C_fsLvB5k1c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evaluation de la continuité de l'activité des conversations"
      ],
      "metadata": {
        "id": "PbTIzEqGq9eC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"# On trie dans l'ordre croissant les mois afin que le mois engendrant de la continuité\n",
        "# soit celui avec le nombre le plus petit. Par exemple si groupe actif en janvier 2022 et les\n",
        "# 5 mois suivants : la valeur pour janvier sera = 1 et celle pour juin sera = 6\n",
        "\n",
        "## PAS LA TECHNIQUE PRIVILÉGIÉE\n",
        "\n",
        "# 1. Trier le dataframe par 'lowest_level_id' et 'year_month'\n",
        "df_users_per_group_test = df_users_per_group_test.sort_values(['lowest_level_id', 'year_month'])\n",
        "\n",
        "# 2. Ajouter une colonne 'previous_is_active'\n",
        "df_users_per_group_test['previous_is_active'] = df_users_per_group_test.groupby('lowest_level_id')['is_active'].shift(1)\n",
        "\n",
        "# 3. Ajouter une colonne 'consecutive_active_months'\n",
        "df_users_per_group_test['consecutive_active_months'] = 0\n",
        "\n",
        "# 4. Itérer sur chaque ligne du dataframe pour calculer les mois consécutifs actifs\n",
        "for group_id, group_df in df_users_per_group_test.groupby('lowest_level_id'):\n",
        "    consecutive_active_months = 0\n",
        "    for index, row in group_df.iterrows():\n",
        "        if row['is_active'] == 1:\n",
        "            consecutive_active_months += 1\n",
        "        else:\n",
        "            consecutive_active_months = 0\n",
        "            if row['previous_is_active'] == 0:\n",
        "                consecutive_active_months = 0\n",
        "        df_users_per_group_test.at[index, 'consecutive_active_months'] = consecutive_active_months\n",
        "df_users_per_group_test = df_users_per_group_test.drop('previous_is_active', axis=1)\"\"\""
      ],
      "metadata": {
        "id": "uMJ73O5nq-Pb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# On trie dans l'ordre décroissant les mois afin que le mois engendrant de la continuité\n",
        "# soit celui avec le nombre le plus grand. Par exemple si groupe actif en janvier 2022 et les\n",
        "# 5 mois suivants : la valeur pour janvier sera = 6 et celle pour juin sera = 1\n",
        "\n",
        "## TECHNIQUE PRIVILÉGIÉE\n",
        "\n",
        "# 1. Trier le dataframe par 'lowest_level_id' et 'year_month'\n",
        "df_users_per_group_test = df_users_per_group_test.sort_values(['lowest_level_id', 'year_month'],ascending=[True,False])\n",
        "\n",
        "# 2. Ajouter une colonne 'previous_is_active'\n",
        "df_users_per_group_test['previous_is_active'] = df_users_per_group_test.groupby('lowest_level_id')['is_active'].shift(1)\n",
        "\n",
        "# 3. Ajouter une colonne 'consecutive_active_months'\n",
        "df_users_per_group_test['consecutive_active_months'] = 0\n",
        "\n",
        "# 4. Itérer sur chaque ligne du dataframe pour calculer les mois consécutifs actifs\n",
        "for group_id, group_df in df_users_per_group_test.groupby('lowest_level_id'):\n",
        "    consecutive_active_months = 0\n",
        "    for index, row in group_df.iterrows():\n",
        "        if row['is_active'] == 1:\n",
        "            consecutive_active_months += 1\n",
        "        else:\n",
        "            consecutive_active_months = 0\n",
        "            if row['previous_is_active'] == 0:\n",
        "                consecutive_active_months = 0\n",
        "        df_users_per_group_test.at[index, 'consecutive_active_months'] = consecutive_active_months\n",
        "df_users_per_group_test = df_users_per_group_test.drop('previous_is_active', axis=1)\n",
        "\n",
        "# On retrie dans l'ordre croissant pour que ça soit plus joli et logique\n",
        "df_users_per_group_test = df_users_per_group_test.sort_values(['lowest_level_id', 'year_month'],ascending=[True,True])"
      ],
      "metadata": {
        "id": "C3DLZSEWLdNp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"# On trie dans l'ordre croissant les mois afin que le mois engendrant de la continuité\n",
        "# soit celui avec le nombre le plus petit. Par exemple si club actif en janvier 2022 et les\n",
        "# 5 mois suivants : la valeur pour janvier sera = 1 et celle pour juin sera = 6\n",
        "\n",
        "## PAS LA TECHNIQUE PRIVILÉGIÉE\n",
        "\n",
        "# 1. Trier le dataframe par 'tribeId' et 'year_month'\n",
        "df_users_per_tribe_test = df_users_per_tribe_test.sort_values(['tribeId', 'year_month'])\n",
        "\n",
        "# 2. Ajouter une colonne 'previous_is_active'\n",
        "df_users_per_tribe_test['previous_is_active'] = df_users_per_tribe_test.groupby('tribeId')['is_active'].shift(1)\n",
        "\n",
        "# 3. Ajouter une colonne 'consecutive_active_months'\n",
        "df_users_per_tribe_test['consecutive_active_months'] = 0\n",
        "\n",
        "# 4. Itérer sur chaque ligne du dataframe pour calculer les mois consécutifs actifs\n",
        "for tribe_id, tribe_df in df_users_per_tribe_test.groupby('tribeId'):\n",
        "    consecutive_active_months = 0\n",
        "    for index, row in tribe_df.iterrows():\n",
        "        if row['is_active'] == 1:\n",
        "            consecutive_active_months += 1\n",
        "        else:\n",
        "            consecutive_active_months = 0\n",
        "            if row['previous_is_active'] == 0:\n",
        "                consecutive_active_months = 0\n",
        "        df_users_per_tribe_test.at[index, 'consecutive_active_months'] = consecutive_active_months\n",
        "df_users_per_tribe_test = df_users_per_tribe_test.drop('previous_is_active', axis=1)\"\"\""
      ],
      "metadata": {
        "id": "Y4Nq5LlYCGW-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# On trie dans l'ordre décroissant les mois afin que le mois engendrant de la continuité\n",
        "# soit celui avec le nombre le plus grand. Par exemple si club actif en janvier 2022 et les\n",
        "# 5 mois suivants : la valeur pour janvier sera = 6 et celle pour juin sera = 1\n",
        "\n",
        "## TECHNIQUE PRIVILÉGIÉE\n",
        "\n",
        "# 1. Trier le dataframe par 'tribeId' et 'year_month'\n",
        "df_users_per_tribe_test = df_users_per_tribe_test.sort_values(['tribeId', 'year_month'],ascending=[True,False])\n",
        "\n",
        "# 2. Ajouter une colonne 'previous_is_active'\n",
        "df_users_per_tribe_test['previous_is_active'] = df_users_per_tribe_test.groupby('tribeId')['is_active'].shift(1)\n",
        "\n",
        "# 3. Ajouter une colonne 'consecutive_active_months'\n",
        "df_users_per_tribe_test['consecutive_active_months'] = 0\n",
        "\n",
        "# 4. Itérer sur chaque ligne du dataframe pour calculer les mois consécutifs actifs\n",
        "for tribe_id, tribe_df in df_users_per_tribe_test.groupby('tribeId'):\n",
        "    consecutive_active_months = 0\n",
        "    for index, row in tribe_df.iterrows():\n",
        "        if row['is_active'] == 1:\n",
        "            consecutive_active_months += 1\n",
        "        else:\n",
        "            consecutive_active_months = 0\n",
        "            if row['previous_is_active'] == 0:\n",
        "                consecutive_active_months = 0\n",
        "        df_users_per_tribe_test.at[index, 'consecutive_active_months'] = consecutive_active_months\n",
        "df_users_per_tribe_test = df_users_per_tribe_test.drop('previous_is_active', axis=1)\n",
        "\n",
        "# On retrie dans l'ordre croissant pour que ça soit plus joli et logique\n",
        "df_users_per_tribe_test = df_users_per_tribe_test.sort_values(['tribeId', 'year_month'],ascending=[True,True])"
      ],
      "metadata": {
        "id": "eaRfflPUNUnx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualisation de certaines lignes afin de confirmer nos résultats"
      ],
      "metadata": {
        "id": "Vo6qz14wyAQu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# trouver l'index de la ligne avec la valeur maximale de la colonne 'consecutive_active_months'\n",
        "idxmax = df_users_per_group_test['consecutive_active_months'].idxmax()\n",
        "\n",
        "# sélectionner la première ligne correspondante en cas de plusieurs maximums\n",
        "max_row = df_users_per_group_test.loc[[idxmax]].iloc[0]\n",
        "\n",
        "# afficher la ligne correspondante\n",
        "print(max_row)\n",
        "#print(df_users_per_group_test.iloc[74])"
      ],
      "metadata": {
        "id": "FrveJPWwx_jv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "active_groups = df_users_per_group_test[(df_users_per_group_test['is_active']== 1) & (df_users_per_group_test['Account Category'] == 'Strategic')]\n",
        "type_groups = df_users_per_group_test[df_users_per_group_test['Account Category']== 'Strategic']\n",
        "unique_active_groups = active_groups['lowest_level_id'].nunique()\n",
        "print(unique_active_groups/type_groups['lowest_level_id'].nunique())"
      ],
      "metadata": {
        "id": "kU5seOfbqwYk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test['Distinct ID'].nunique()"
      ],
      "metadata": {
        "id": "2BXIcR8W6x00"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test[df_users_per_group_test['Account Category']=='Strategic']['lowest_level_id'].nunique()/df_users_per_group_test[df_users_per_group_test['Account Category']!='No_data']['lowest_level_id'].nunique()"
      ],
      "metadata": {
        "id": "44YbMdKR5AW4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Premières analyses"
      ],
      "metadata": {
        "id": "j5CJKVnpET35"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Suppression des valeurs aberrantes\n",
        "\n",
        "df_users_per_group_test = df_users_per_group_test.loc[df_users_per_group_test['distinct_users_per_month'] <= 100]\n",
        "df_users_per_tribe_test = df_users_per_tribe_test.loc[df_users_per_tribe_test['distinct_users_per_month'] <= 100]"
      ],
      "metadata": {
        "id": "gxp5CugDZFw-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Nombre d'interactions moyen pour chaque palier de continuité d'activité\n",
        "\n",
        "for i in range(1, max(df_users_per_group_test[\"consecutive_active_months\"])+1):\n",
        "  selected_rows = df_users_per_group_test[df_users_per_group_test['consecutive_active_months'] == i]\n",
        "\n",
        "  # Si on cherche juste le nombre d'interactions\n",
        "  moy = round(selected_rows['interactions_per_month'].mean(),1)\n",
        "\n",
        "  # Si on cherche le nombre d'interactions divisé par le nombre d'inscrits\n",
        "  selected_rows['interactions_per_registered'] = selected_rows['interactions_per_month'] / selected_rows['registered']\n",
        "  moybis = round(selected_rows['interactions_per_registered'].mean(),1)\n",
        "\n",
        "  print(\"Les conversations perdurant exactement \"+str(i)+\" mois comportent en moyenne \"+str(moy)+\" interactions de tous types.\")"
      ],
      "metadata": {
        "id": "E3olDgvQEX75"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Nombre de conversations ayant perduré X mois\n",
        "for i in range(0, max(df_users_per_group_test[\"consecutive_active_months\"])+1):\n",
        "  selected_rows = df_users_per_group_test[df_users_per_group_test['consecutive_active_months'] == i]\n",
        "  print(\"On compte \"+str(len(selected_rows))+\" groupes ayant perduré \"+str(i)+\" mois.\")\n",
        "\n",
        "print(\" \")\n",
        "\n",
        "for i in range(0, max(df_users_per_tribe_test[\"consecutive_active_months\"])+1):\n",
        "  selected_rows = df_users_per_tribe_test[df_users_per_tribe_test['consecutive_active_months'] == i]\n",
        "  print(\"On compte \"+str(len(selected_rows))+\" clubs ayant perduré \"+str(i)+\" mois.\")"
      ],
      "metadata": {
        "id": "6oLs0cbdQNh7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# % de conversations ayant perduré X mois\n",
        "for i in range(0, max(df_users_per_group_test[\"consecutive_active_months\"])+1):\n",
        "  selected_rows = df_users_per_group_test[df_users_per_group_test['consecutive_active_months'] == i]\n",
        "  print(\"On compte \"+str(round(len(selected_rows)/len(df_users_per_group_test)*100,1))+\"% de groupes ayant perduré \"+str(i)+\" mois.\")\n",
        "\n",
        "print(\" \")\n",
        "\n",
        "for i in range(0, max(df_users_per_tribe_test[\"consecutive_active_months\"])+1):\n",
        "  selected_rows = df_users_per_tribe_test[df_users_per_tribe_test['consecutive_active_months'] == i]\n",
        "  print(\"On compte \"+str(round(len(selected_rows)/len(df_users_per_tribe_test)*100,1))+\"% de clubs ayant perduré \"+str(i)+\" mois.\")"
      ],
      "metadata": {
        "id": "HmsodYhLRnFR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Nombre d'interactions moyen pour chaque type de client, pour les groupes ayant perduré au moins 2 mois\n",
        "\n",
        "for i in [\"SMB\",\"Middle\",\"Strategic\"]:\n",
        "  selected_rows = df_users_per_group_test[(df_users_per_group_test['consecutive_active_months'] >= 2) & (df_users_per_group_test['Account Category'] == i)]\n",
        "  selected_rows['interactions_per_registered'] = selected_rows['interactions_per_month'] / selected_rows['registered']\n",
        "  moybis = round(selected_rows['interactions_per_registered'].mean(),1)\n",
        "\n",
        "  print(\"Les conversations dans les entreprises de type \"+str(i)+\" et perdurant au moins 2 mois comportent en moyenne \"+str(moybis)+\" interactions par utilisateur de tous types.\")"
      ],
      "metadata": {
        "id": "hyMmoba2OULS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Pourcentage de groupes, par catégorie, qui perdurent plus de 2 mois\n",
        "for i in [\"SMB\",\"Middle\",\"Strategic\"]:\n",
        "  selected_rows = df_users_per_group_test[(df_users_per_group_test['consecutive_active_months'] >=2) & (df_users_per_group_test['Account Category'] == i)]\n",
        "  print(\"On compte \"+str(round(len(selected_rows)/len(df_users_per_group_test[df_users_per_group_test['Account Category'] == i])*100,1))+\"% de groupes de clients \"+str(i)+\" ayant perduré au moins 2 mois.\")\n",
        "\n",
        "print(\" \")\n",
        "\n",
        "for i in [\"SMB\",\"Middle\",\"Strategic\"]:\n",
        "  selected_rows = df_users_per_tribe_test[(df_users_per_tribe_test['consecutive_active_months'] >=2) & (df_users_per_tribe_test['Account Category'] == i)]\n",
        "  print(\"On compte \"+str(round(len(selected_rows)/len(df_users_per_tribe_test[df_users_per_tribe_test['Account Category'] == i])*100,1))+\"% de clubs de clients \"+str(i)+\" ayant perduré au moins 2 mois.\")"
      ],
      "metadata": {
        "id": "nTBJzxU4PxMC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_users_per_group_test.copy()\n",
        "X = X.drop(X.loc[(X == 'No_data').any(axis=1)].index)\n",
        "y = X['consecutive_active_months']\n",
        "X = X.drop(['consecutive_active_months','lowest_level_id','Company_Language','level_0_id','level_1_id','quarter','month','year_month','month_rank','Name','Account Category','Total Employees','Max Potential Users'], axis=1)\n",
        "k_best = SelectKBest(f_classif, k = 'all')\n",
        "k_best.fit(X, y)\n",
        "scores1 = pd.DataFrame({'Variable': X.columns, 'Score': k_best.scores_})\n",
        "scores1 = scores1.sort_values('Score', ascending=False)\n",
        "print(scores1)"
      ],
      "metadata": {
        "id": "NobFXvL20oZG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# On crée 2 nouveaux dataframes pour analyser seulement les conversations ayant été actives\n",
        "\n",
        "df_groups_actives = df_users_per_group_test[df_users_per_group_test['consecutive_active_months'] >=1]\n",
        "df_tribes_actives = df_users_per_tribe_test[df_users_per_tribe_test['consecutive_active_months'] >=1]\n",
        "\n",
        "df_groups_actives = df_groups_actives.drop(df_groups_actives.loc[(df_groups_actives == 'No_data').any(axis=1)].index)\n",
        "df_tribes_actives = df_tribes_actives.drop(df_tribes_actives.loc[(df_tribes_actives == 'No_data').any(axis=1)].index)\n",
        "\n",
        "\n",
        "\"\"\"for i, j in zip([\"ES\",\"FR\",\"EN\"], [0,1,2]):\n",
        "  df_groups_actives.loc[df_groups_actives['Company_Language'] == i, 'Company_Language'] = int(j)\n",
        "df_groups_actives['Company_Language'] = df_groups_actives['Company_Language'].astype('int64')\n",
        "\n",
        "for i, j in zip([\"SMB\",\"Middle\",\"Strategic\"], [0,1,2]):\n",
        "  df_groups_actives.loc[df_groups_actives['Account Category'] == i, 'Account Category'] = int(j)\n",
        "df_groups_actives['Account Category'] = df_groups_actives['Account Category'].astype('int64')\n",
        "\n",
        "for i, j in zip([\"ES\",\"FR\",\"EN\"], [0,1,2]):\n",
        "  df_tribes_actives.loc[df_tribes_actives['Company_Language'] == i, 'Company_Language'] = int(j)\n",
        "df_tribes_actives['Company_Language'] = df_tribes_actives['Company_Language'].astype('int64')\n",
        "\n",
        "for i, j in zip([\"SMB\",\"Middle\",\"Strategic\"], [0,1,2]):\n",
        "  df_tribes_actives.loc[df_tribes_actives['Account Category'] == i, 'Account Category'] = int(j)\n",
        "df_tribes_actives['Account Category'] = df_tribes_actives['Account Category'].astype('int64')\n",
        "\n",
        "df_groups_actives.describe()\"\"\"\n",
        "\n",
        "groups_encoded = pd.get_dummies(df_groups_actives, columns=['Account Category','Company_Language'])\n",
        "tribes_encoded = pd.get_dummies(df_tribes_actives, columns=['Account Category','Company_Language'])\n",
        "groups_encoded['Total Employees'] = groups_encoded['Total Employees'].astype('int64')\n",
        "groups_encoded['Total registered users'] = groups_encoded['Total registered users'].astype('int64')\n",
        "groups_encoded['Max Potential Users'] = groups_encoded['Max Potential Users'].astype('int64')\n",
        "tribes_encoded['Total Employees'] = tribes_encoded['Total Employees'].astype('int64')\n",
        "tribes_encoded['Total registered users'] = tribes_encoded['Total registered users'].astype('int64')\n",
        "tribes_encoded['Max Potential Users'] = tribes_encoded['Max Potential Users'].astype('int64')\n",
        "groups_encoded.head()"
      ],
      "metadata": {
        "id": "esaBc2KBGG1e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_groups_actives['Max Potential Users'].value_counts())"
      ],
      "metadata": {
        "id": "h4XChXjcqxzR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(groups_encoded.info())"
      ],
      "metadata": {
        "id": "HHlUqU7Gwdz0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "correlations_groups = groups_encoded.corr(method = 'pearson')['consecutive_active_months']\n",
        "#print(correlations_groups)\n",
        "correlations_tribes = tribes_encoded.corr(method = 'pearson')['consecutive_active_months']\n",
        "print(correlations_tribes)"
      ],
      "metadata": {
        "id": "PQKZcAtrG6mu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Graphique de dispersion\n",
        "\n",
        "plt.scatter(df_groups_actives['distinct_users_per_month'], df_groups_actives['consecutive_active_months'])\n",
        "plt.xlabel('distinct users per month - groups')\n",
        "plt.ylabel('Consecutive Active Months - groups')\n",
        "plt.show()\n",
        "\n",
        "plt.scatter(df_tribes_actives['distinct_users_per_month'], df_tribes_actives['consecutive_active_months'])\n",
        "plt.xlabel('distinct users per month - tribes')\n",
        "plt.ylabel('Consecutive Active Months - tribes')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "q_NF8qu8RQsm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.kdeplot(df_groups_actives['Account Category'], shade=True)\n",
        "plt.xlabel('Account Category - groups')\n",
        "plt.ylabel('Densité - groups')\n",
        "plt.show()\n",
        "\n",
        "sns.kdeplot(df_tribes_actives['Account Category'], shade=True)\n",
        "plt.xlabel('Account Category - tribes')\n",
        "plt.ylabel('Densité - tribes')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "tJi196xWX6VW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(groups_encoded['Total Employees'])"
      ],
      "metadata": {
        "id": "AT3jhUgAcDSY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "corrHeat = groups_encoded.loc[:,['registered', 'interactions_per_month', 'posts_per_month','comments_per_month','users+2_interactions','consecutive_active_months']].corr()\n",
        "sns.heatmap(corrHeat, xticklabels=corrHeat.columns, yticklabels=corrHeat.columns, annot=True)\n",
        "plt.show()\n",
        "\n",
        "corrHeat = groups_encoded.loc[:,['Max Potential Users', 'Account Category_Middle', 'Account Category_SMB', 'Account Category_Strategic','Company_Language_EN','Company_Language_ES','Company_Language_FR','consecutive_active_months']].corr()\n",
        "sns.heatmap(corrHeat, xticklabels=corrHeat.columns, yticklabels=corrHeat.columns, annot=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "5cgZymGJay_-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Courbe de corrélation entre % actifs à M0 et % actifs à M+3 - Pour la 1ère fois que les 10% sont atteints our chaque conversation - Pas pertinent, ne pas utiliser"
      ],
      "metadata": {
        "id": "jdN2kZUzwzQb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# On crée un nouveau dataset avec seulement les infos qui nous intéressent\n",
        "\n",
        "actifs_groups = df_users_per_group_test.copy()\n",
        "actifs_groups = actifs_groups.loc[:, ['lowest_level_id','year_month','distinct_users_per_month','consecutive_active_months']]"
      ],
      "metadata": {
        "id": "r6MW_zG_w8hx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Création d'un DataFrame vide pour stocker les données finales\n",
        "actifs_groups_bis = pd.DataFrame(columns=actifs_groups.columns)\n",
        "actifs_groups_bis['year_month+3'] = \"\"\n",
        "actifs_groups_bis['distinct_users_per_month+3'] = \"\"\n",
        "\n",
        "# Pour chaque conversation\n",
        "for conv_id in actifs_groups['lowest_level_id'].unique():\n",
        "\n",
        "    # Sélectionner toutes les lignes correspondantes à la conversation\n",
        "    conv_data = actifs_groups[actifs_groups['lowest_level_id'] == conv_id]\n",
        "\n",
        "    # Trouver le mois où la conversation a atteint 10 distinct_users_per_month pour la première fois\n",
        "    conv_first_month = conv_data[conv_data['distinct_users_per_month'] >= 10]['year_month'].min()\n",
        "\n",
        "    # Si la conversation n'a jamais atteint 10 distinct_users_per_month, passer à la conversation suivante\n",
        "    if pd.isna(conv_first_month):\n",
        "        continue\n",
        "\n",
        "    # Ajouter cette ligne au DataFrame final\n",
        "    actifs_groups_bis = actifs_groups_bis.append(conv_data[conv_data['year_month'] == conv_first_month])\n",
        "\n",
        "    # Calculer le mois 3 mois plus tard\n",
        "    date_obj = datetime.strptime(conv_first_month, '%Y-%m-%d').date()\n",
        "    conv_next_month = date_obj + relativedelta(months=3)\n",
        "    conv_next_month = conv_next_month.strftime('%Y-%m-%d')\n",
        "\n",
        "    # Vérifier que le mois suivant existe dans les données\n",
        "    if conv_next_month not in conv_data['year_month'].values:\n",
        "        continue\n",
        "\n",
        "    # Ajouter la valeur de distinct_users_per_month pour le mois suivant\n",
        "    next_month_value = conv_data[conv_data['year_month'] == conv_next_month]['distinct_users_per_month'].iloc[0]\n",
        "\n",
        "    # Remplir la colonne year_month+3 pour la conversation sélectionnée\n",
        "    actifs_groups_bis.loc[actifs_groups_bis['lowest_level_id'] == conv_id, 'year_month+3'] = conv_next_month\n",
        "\n",
        "    # Remplir la colonne distinct_users_per_month+3 pour la conversation sélectionnée\n",
        "    actifs_groups_bis.loc[actifs_groups_bis['lowest_level_id'] == conv_id, 'distinct_users_per_month+3'] = next_month_value\n",
        "\n",
        "# Supprimer les lignes contenant des valeurs manquantes\n",
        "actifs_groups_bis.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "XkbSUK6M8gc8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Création du nouveau df pour la visualisation des résultats\n",
        "\n",
        "actifs_groups_courbe = pd.DataFrame(columns=[\"tranches\", \"moyenne_3_mois\", \"mediane_non_nulle_3_mois\", \"moyenne_non_nulle_3_mois\"])\n",
        "\n",
        "# Remplissage de la colonne \"tranches\"\n",
        "for i in range(10, 100, 10):\n",
        "    tranches = f\"{i}-{i+10}\"\n",
        "    actifs_groups_courbe = actifs_groups_courbe.append({\"tranches\": tranches}, ignore_index=True)\n",
        "print(actifs_groups_courbe)"
      ],
      "metadata": {
        "id": "d_E3Jw9cDpUk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remplissage des valeurs moyennes\n",
        "\n",
        "for i in actifs_groups_courbe['tranches'][0:8] :\n",
        "  if len(actifs_groups_bis[(actifs_groups_bis['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])>0:\n",
        "    n = len(actifs_groups_bis[(actifs_groups_bis['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])\n",
        "    moy = actifs_groups_bis[(actifs_groups_bis['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5].mean()\n",
        "    actifs_groups_courbe.loc[actifs_groups_courbe['tranches'] == i, 'moyenne_3_mois'] = moy\n",
        "    print(i, moy)"
      ],
      "metadata": {
        "id": "0JMT6zlv3NaK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remplissage des valeurs medianes parmi les valeurs non nulles\n",
        "\n",
        "for i in actifs_groups_courbe['tranches'][0:8] :\n",
        "  if len(actifs_groups_bis[(actifs_groups_bis['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis['distinct_users_per_month'] < int(i[-2:])) & (actifs_groups_bis['distinct_users_per_month+3'] > 0)].iloc[:,5])>0:\n",
        "    n = len(actifs_groups_bis[(actifs_groups_bis['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis['distinct_users_per_month'] < int(i[-2:])) & (actifs_groups_bis['distinct_users_per_month+3'] > 0)].iloc[:,5])\n",
        "    med = actifs_groups_bis[(actifs_groups_bis['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis['distinct_users_per_month'] < int(i[-2:])) & (actifs_groups_bis['distinct_users_per_month+3'] > 0)].iloc[:,5].median()\n",
        "    actifs_groups_courbe.loc[actifs_groups_courbe['tranches'] == i, 'mediane_non_nulle_3_mois'] = med\n",
        "    print(i, n, med)"
      ],
      "metadata": {
        "id": "jkQDREMbfvhv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remplissage des valeurs moyennes parmi les valeurs non nulles\n",
        "\n",
        "for i in actifs_groups_courbe['tranches'][0:8] :\n",
        "  if len(actifs_groups_bis[(actifs_groups_bis['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis['distinct_users_per_month'] < int(i[-2:])) & (actifs_groups_bis['distinct_users_per_month+3'] > 0)].iloc[:,5])>0:\n",
        "    n = len(actifs_groups_bis[(actifs_groups_bis['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis['distinct_users_per_month'] < int(i[-2:])) & (actifs_groups_bis['distinct_users_per_month+3'] > 0)].iloc[:,5])\n",
        "    moy = actifs_groups_bis[(actifs_groups_bis['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis['distinct_users_per_month'] < int(i[-2:])) & (actifs_groups_bis['distinct_users_per_month+3'] > 0)].iloc[:,5].mean()\n",
        "    actifs_groups_courbe.loc[actifs_groups_courbe['tranches'] == i, 'moyenne_non_nulle_3_mois'] = moy\n",
        "    print(i, n, med)"
      ],
      "metadata": {
        "id": "EI_IO_MqmdTN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "actifs_groups_courbe.dropna(inplace=True)\n",
        "print(actifs_groups_courbe)"
      ],
      "metadata": {
        "id": "PsPPzokDFrk9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Créer une liste pour les tranches\n",
        "tranches = actifs_groups_courbe['tranches']\n",
        "\n",
        "# Créer une liste pour les valeurs de 3 mois\n",
        "moyenne_3_mois = actifs_groups_courbe['moyenne_3_mois']\n",
        "\n",
        "# Tracer la courbe\n",
        "plt.plot(tranches, moyenne_3_mois)\n",
        "\n",
        "# Afficher la courbe\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "NqLfz5oxS4pL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Créer une liste pour les tranches\n",
        "tranches = actifs_groups_courbe['tranches']\n",
        "\n",
        "# Créer une liste pour les valeurs de 3 mois\n",
        "mediane_non_nulle_3_mois = actifs_groups_courbe['mediane_non_nulle_3_mois']\n",
        "\n",
        "# Tracer la courbe\n",
        "plt.plot(tranches, mediane_non_nulle_3_mois)\n",
        "\n",
        "# Afficher la courbe\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "IeOoUVOtiXAY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Créer une liste pour les tranches\n",
        "tranches = actifs_groups_courbe['tranches']\n",
        "\n",
        "# Créer une liste pour les valeurs de 3 mois\n",
        "moyenne_non_nulle_3_mois = actifs_groups_courbe['moyenne_non_nulle_3_mois']\n",
        "\n",
        "# Tracer la courbe\n",
        "plt.plot(tranches, moyenne_non_nulle_3_mois)\n",
        "\n",
        "# Afficher la courbe\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "tFm02Ev_nHYO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Courbe de corrélation entre % actifs à M0 et % actifs à M+3 - Pour chaque fois que les 10% sont atteints"
      ],
      "metadata": {
        "id": "k0Sj71UT_d_h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# On crée un nouveau dataset avec seulement les infos qui nous intéressent\n",
        "\n",
        "actifs_groups = df_users_per_group_test.copy()\n",
        "actifs_groups = actifs_groups.loc[:, ['lowest_level_id','year_month','distinct_users_per_month','consecutive_active_months']]"
      ],
      "metadata": {
        "id": "80YPKJ7vAO08"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Création d'un DataFrame vide pour stocker les données finales\n",
        "actifs_groups_bis_2 = pd.DataFrame(columns=actifs_groups.columns)\n",
        "actifs_groups_bis_2['year_month+3'] = \"\"\n",
        "actifs_groups_bis_2['distinct_users_per_month+3'] = \"\"\n",
        "\n",
        "# Pour chaque conversation\n",
        "for conv_id in actifs_groups['lowest_level_id'].unique():\n",
        "    conv_data = actifs_groups[actifs_groups['lowest_level_id'] == conv_id]\n",
        "    for conv_mois in conv_data['year_month'] :\n",
        "      if conv_data.loc[conv_data['year_month'] == conv_mois, 'distinct_users_per_month'].values[0] >= 10:\n",
        "        actifs_groups_bis_2 = actifs_groups_bis_2.append(conv_data[conv_data['year_month'] == conv_mois])\n",
        "        date_obj = datetime.strptime(conv_mois, '%Y-%m-%d').date()\n",
        "        conv_next_month = date_obj + relativedelta(months=3)\n",
        "        conv_next_month = conv_next_month.strftime('%Y-%m-%d')\n",
        "        if conv_next_month not in conv_data['year_month'].values:\n",
        "          continue\n",
        "        next_month_value = conv_data[conv_data['year_month'] == conv_next_month]['distinct_users_per_month'].iloc[0]\n",
        "        actifs_groups_bis_2.loc[(actifs_groups_bis_2['lowest_level_id'] == conv_id) & (actifs_groups_bis_2['year_month'] == conv_mois), 'year_month+3'] = conv_next_month\n",
        "        actifs_groups_bis_2.loc[(actifs_groups_bis_2['lowest_level_id'] == conv_id) & (actifs_groups_bis_2['year_month'] == conv_mois), 'distinct_users_per_month+3'] = next_month_value\n",
        "actifs_groups_bis_2.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "_wZNzcDDrHKd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(actifs_groups_bis_2)"
      ],
      "metadata": {
        "id": "Su-EtNJ82pBM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Création du nouveau df pour la visualisation des résultats\n",
        "\n",
        "actifs_groups_courbe_2 = pd.DataFrame(columns=[\"tranches\", \"moyenne_3_mois\", \"%actifs\", \"size\"])\n",
        "\n",
        "# Remplissage de la colonne \"tranches\"\n",
        "for i in range(10, 60, 10):\n",
        "    tranches = f\"{i}-{i+10}\"\n",
        "    actifs_groups_courbe_2 = actifs_groups_courbe_2.append({\"tranches\": tranches}, ignore_index=True)\n",
        "print(actifs_groups_courbe_2)"
      ],
      "metadata": {
        "id": "fgcyLoeO5jyP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remplissage des valeurs moyennes\n",
        "\n",
        "for i in actifs_groups_courbe_2['tranches'][0:8] :\n",
        "  if len(actifs_groups_bis_2[(actifs_groups_bis_2['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis_2['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])>0:\n",
        "    n = len(actifs_groups_bis_2[(actifs_groups_bis_2['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis_2['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])\n",
        "    moy = actifs_groups_bis_2[(actifs_groups_bis_2['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis_2['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5].mean()\n",
        "    actifs_groups_courbe_2.loc[actifs_groups_courbe_2['tranches'] == i, 'moyenne_3_mois'] = moy\n",
        "    actifs_groups_courbe_2.loc[actifs_groups_courbe_2['tranches'] == i, 'size'] = n\n",
        "    print(i, n, moy)\n",
        "\"\"\"actifs_groups_courbe_2.to_csv('toutes_entreprises.csv', index = False)\n",
        "files.download('toutes_entreprises.csv')\"\"\""
      ],
      "metadata": {
        "id": "LeAgC1xv5kA-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remplissage du % de conversations perdurant\n",
        "\n",
        "for i in actifs_groups_courbe_2['tranches'][0:8] :\n",
        "  if len(actifs_groups_bis_2[(actifs_groups_bis_2['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis_2['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])>0:\n",
        "    n = len(actifs_groups_bis_2[(actifs_groups_bis_2['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis_2['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])\n",
        "    pourcentage_perdure = actifs_groups_bis_2[(actifs_groups_bis_2['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_bis_2['distinct_users_per_month'] < int(i[-2:]))]\n",
        "    pourcentage_perdure = len(pourcentage_perdure[pourcentage_perdure['distinct_users_per_month+3'] >= 10])/len(pourcentage_perdure)\n",
        "    actifs_groups_courbe_2.loc[actifs_groups_courbe_2['tranches'] == i, '%actifs'] = pourcentage_perdure\n",
        "    actifs_groups_courbe_2.loc[actifs_groups_courbe_2['tranches'] == i, 'size'] = n\n",
        "    print(i, n, pourcentage_perdure)"
      ],
      "metadata": {
        "id": "TiKfQ8IJTYtf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "actifs_groups_courbe_2.dropna(inplace=True)\n",
        "print(actifs_groups_courbe_2)"
      ],
      "metadata": {
        "id": "mO8SFqLK50eN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"actifs_groups_courbe_2.to_csv('actifs_groups_courbe_2.csv', index=False)\n",
        "files.download('actifs_groups_courbe_2.csv')\"\"\""
      ],
      "metadata": {
        "id": "RcrH7FDm6eGS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "249d3bf5-e3b0-40be-d381-8ad5e1d0f937"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_12a4da5d-d1b6-4959-8584-62e473cd87fb\", \"actifs_groups_courbe_2.csv\", 278)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Courbe de corrélation entre % actifs à M0 et % actifs à M+3 - Pour chaque fois que les 10% sont atteints - Account category"
      ],
      "metadata": {
        "id": "lvVO3455B5TV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# On crée un nouveau dataset avec seulement les infos qui nous intéressent\n",
        "\n",
        "actifs_groups = df_users_per_group_test.copy()\n",
        "actifs_groups = actifs_groups.loc[:, ['lowest_level_id','year_month','Account Category', 'distinct_users_per_month','consecutive_active_months']]\n",
        "actifs_groups = actifs_groups[actifs_groups['Account Category'] != 'No_data']\n",
        "print(actifs_groups)"
      ],
      "metadata": {
        "id": "ZAwSRGuNB5Te"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Création de DataFrames vides pour stocker les données finales pour chaque catégorie de compte\n",
        "actifs_groups_SMB = pd.DataFrame(columns=actifs_groups.columns)\n",
        "actifs_groups_SMB['year_month+3'] = \"\"\n",
        "actifs_groups_SMB['distinct_users_per_month+3'] = \"\"\n",
        "\n",
        "actifs_groups_Middle = pd.DataFrame(columns=actifs_groups.columns)\n",
        "actifs_groups_Middle['year_month+3'] = \"\"\n",
        "actifs_groups_Middle['distinct_users_per_month+3'] = \"\"\n",
        "\n",
        "actifs_groups_Strategic = pd.DataFrame(columns=actifs_groups.columns)\n",
        "actifs_groups_Strategic['year_month+3'] = \"\"\n",
        "actifs_groups_Strategic['distinct_users_per_month+3'] = \"\"\n",
        "\n",
        "# Pour chaque conversation\n",
        "for conv_id in actifs_groups['lowest_level_id'].unique():\n",
        "    conv_data = actifs_groups[actifs_groups['lowest_level_id'] == conv_id]\n",
        "\n",
        "    # Séparation des données en fonction de la catégorie de compte\n",
        "    if conv_data['Account Category'].values[0] == 'SMB':\n",
        "      for conv_mois in conv_data['year_month'] :\n",
        "          if conv_data.loc[conv_data['year_month'] == conv_mois, 'distinct_users_per_month'].values[0] >= 10:\n",
        "              actifs_groups_SMB = actifs_groups_SMB.append(conv_data[conv_data['year_month'] == conv_mois])\n",
        "              date_obj = datetime.strptime(conv_mois, '%Y-%m-%d').date()\n",
        "              conv_next_month = date_obj + relativedelta(months=3)\n",
        "              conv_next_month = conv_next_month.strftime('%Y-%m-%d')\n",
        "              if conv_next_month not in conv_data['year_month'].values:\n",
        "                  continue\n",
        "              next_month_value = conv_data[conv_data['year_month'] == conv_next_month]['distinct_users_per_month'].iloc[0]\n",
        "              actifs_groups_SMB.loc[(actifs_groups_SMB['lowest_level_id'] == conv_id) & (actifs_groups_SMB['year_month'] == conv_mois), 'year_month+3'] = conv_next_month\n",
        "              actifs_groups_SMB.loc[(actifs_groups_SMB['lowest_level_id'] == conv_id) & (actifs_groups_SMB['year_month'] == conv_mois), 'distinct_users_per_month+3'] = next_month_value\n",
        "    elif conv_data['Account Category'].values[0] == 'Middle':\n",
        "      for conv_mois in conv_data['year_month'] :\n",
        "          if conv_data.loc[conv_data['year_month'] == conv_mois, 'distinct_users_per_month'].values[0] >= 10:\n",
        "              actifs_groups_Middle = actifs_groups_Middle.append(conv_data[conv_data['year_month'] == conv_mois])\n",
        "              date_obj = datetime.strptime(conv_mois, '%Y-%m-%d').date()\n",
        "              conv_next_month = date_obj + relativedelta(months=3)\n",
        "              conv_next_month = conv_next_month.strftime('%Y-%m-%d')\n",
        "              if conv_next_month not in conv_data['year_month'].values:\n",
        "                  continue\n",
        "              next_month_value = conv_data[conv_data['year_month'] == conv_next_month]['distinct_users_per_month'].iloc[0]\n",
        "              actifs_groups_Middle.loc[(actifs_groups_Middle['lowest_level_id'] == conv_id) & (actifs_groups_Middle['year_month'] == conv_mois), 'year_month+3'] = conv_next_month\n",
        "              actifs_groups_Middle.loc[(actifs_groups_Middle['lowest_level_id'] == conv_id) & (actifs_groups_Middle['year_month'] == conv_mois), 'distinct_users_per_month+3'] = next_month_value\n",
        "    else:\n",
        "      for conv_mois in conv_data['year_month'] :\n",
        "          if conv_data.loc[conv_data['year_month'] == conv_mois, 'distinct_users_per_month'].values[0] >= 10:\n",
        "              actifs_groups_Strategic = actifs_groups_Strategic.append(conv_data[conv_data['year_month'] == conv_mois])\n",
        "              date_obj = datetime.strptime(conv_mois, '%Y-%m-%d').date()\n",
        "              conv_next_month = date_obj + relativedelta(months=3)\n",
        "              conv_next_month = conv_next_month.strftime('%Y-%m-%d')\n",
        "              if conv_next_month not in conv_data['year_month'].values:\n",
        "                  continue\n",
        "              next_month_value = conv_data[conv_data['year_month'] == conv_next_month]['distinct_users_per_month'].iloc[0]\n",
        "              actifs_groups_Strategic.loc[(actifs_groups_Strategic['lowest_level_id'] == conv_id) & (actifs_groups_Strategic['year_month'] == conv_mois), 'year_month+3'] = conv_next_month\n",
        "              actifs_groups_Strategic.loc[(actifs_groups_Strategic['lowest_level_id'] == conv_id) & (actifs_groups_Strategic['year_month'] == conv_mois), 'distinct_users_per_month+3'] = next_month_value\n",
        "\n",
        "# Suppression des lignes avec des valeurs manquantes dans chaque DataFrame de catégorie de compte\n",
        "actifs_groups_SMB.dropna(inplace=True)\n",
        "actifs_groups_Middle.dropna(inplace=True)\n",
        "actifs_groups_Strategic.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "n0r72aXBB5Te"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Création du nouveau df pour la visualisation des résultats\n",
        "\n",
        "actifs_groups_courbe_SMB = pd.DataFrame(columns=[\"tranches\", \"moyenne_3_mois\", \"%actifs\", \"size\"])\n",
        "\n",
        "# Remplissage de la colonne \"tranches\"\n",
        "for i in range(10, 100, 10):\n",
        "    tranches = f\"{i}-{i+10}\"\n",
        "    actifs_groups_courbe_SMB = actifs_groups_courbe_SMB.append({\"tranches\": tranches}, ignore_index=True)\n",
        "print(actifs_groups_courbe_SMB)\n",
        "\n",
        "# Création du nouveau df pour la visualisation des résultats\n",
        "\n",
        "actifs_groups_courbe_Middle = pd.DataFrame(columns=[\"tranches\", \"moyenne_3_mois\", \"%actifs\", \"size\"])\n",
        "\n",
        "# Remplissage de la colonne \"tranches\"\n",
        "for i in range(10, 100, 10):\n",
        "    tranches = f\"{i}-{i+10}\"\n",
        "    actifs_groups_courbe_Middle = actifs_groups_courbe_Middle.append({\"tranches\": tranches}, ignore_index=True)\n",
        "print(actifs_groups_courbe_Middle)\n",
        "\n",
        "# Création du nouveau df pour la visualisation des résultats\n",
        "\n",
        "actifs_groups_courbe_Strategic = pd.DataFrame(columns=[\"tranches\", \"moyenne_3_mois\", \"%actifs\", \"size\"])\n",
        "\n",
        "# Remplissage de la colonne \"tranches\"\n",
        "for i in range(10, 100, 10):\n",
        "    tranches = f\"{i}-{i+10}\"\n",
        "    actifs_groups_courbe_Strategic = actifs_groups_courbe_Strategic.append({\"tranches\": tranches}, ignore_index=True)\n",
        "print(actifs_groups_courbe_Strategic)"
      ],
      "metadata": {
        "id": "3Oh3VYhAB5Tf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remplissage des valeurs moyennes\n",
        "\n",
        "for i in actifs_groups_courbe_SMB['tranches'][0:8] :\n",
        "  if len(actifs_groups_SMB[(actifs_groups_SMB['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_SMB['distinct_users_per_month'] < int(i[-2:]))].iloc[:,6])>0:\n",
        "    n = len(actifs_groups_SMB[(actifs_groups_SMB['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_SMB['distinct_users_per_month'] < int(i[-2:]))].iloc[:,6])\n",
        "    moy = actifs_groups_SMB[(actifs_groups_SMB['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_SMB['distinct_users_per_month'] < int(i[-2:]))].iloc[:,6].mean()\n",
        "    actifs_groups_courbe_SMB.loc[actifs_groups_courbe_SMB['tranches'] == i, 'moyenne_3_mois'] = moy\n",
        "    actifs_groups_courbe_SMB.loc[actifs_groups_courbe_SMB['tranches'] == i, 'size'] = n\n",
        "    print(i, moy)\n",
        "\n",
        "# Remplissage des valeurs moyennes\n",
        "\n",
        "for i in actifs_groups_courbe_Middle['tranches'][0:8] :\n",
        "  if len(actifs_groups_Middle[(actifs_groups_Middle['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Middle['distinct_users_per_month'] < int(i[-2:]))].iloc[:,6])>0:\n",
        "    n = len(actifs_groups_Middle[(actifs_groups_Middle['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Middle['distinct_users_per_month'] < int(i[-2:]))].iloc[:,6])\n",
        "    moy = actifs_groups_Middle[(actifs_groups_Middle['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Middle['distinct_users_per_month'] < int(i[-2:]))].iloc[:,6].mean()\n",
        "    actifs_groups_courbe_Middle.loc[actifs_groups_courbe_Middle['tranches'] == i, 'moyenne_3_mois'] = moy\n",
        "    actifs_groups_courbe_Middle.loc[actifs_groups_courbe_Middle['tranches'] == i, 'size'] = n\n",
        "    print(i, moy)\n",
        "\n",
        "# Remplissage des valeurs moyennes\n",
        "\n",
        "for i in actifs_groups_courbe_Strategic['tranches'][0:8] :\n",
        "  if len(actifs_groups_Strategic[(actifs_groups_Strategic['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Strategic['distinct_users_per_month'] < int(i[-2:]))].iloc[:,6])>0:\n",
        "    n = len(actifs_groups_Strategic[(actifs_groups_Strategic['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Strategic['distinct_users_per_month'] < int(i[-2:]))].iloc[:,6])\n",
        "    moy = actifs_groups_Strategic[(actifs_groups_Strategic['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Strategic['distinct_users_per_month'] < int(i[-2:]))].iloc[:,6].mean()\n",
        "    actifs_groups_courbe_Strategic.loc[actifs_groups_courbe_Strategic['tranches'] == i, 'moyenne_3_mois'] = moy\n",
        "    actifs_groups_courbe_Strategic.loc[actifs_groups_courbe_Strategic['tranches'] == i, 'size'] = n\n",
        "    print(i, moy)\n",
        "\n",
        "# Remplissage du % de conversations perdurant\n",
        "\n",
        "for i in actifs_groups_courbe_SMB['tranches'][0:8] :\n",
        "  if len(actifs_groups_SMB[(actifs_groups_SMB['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_SMB['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])>0:\n",
        "    n = len(actifs_groups_SMB[(actifs_groups_SMB['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_SMB['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])\n",
        "    pourcentage_perdure = actifs_groups_SMB[(actifs_groups_SMB['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_SMB['distinct_users_per_month'] < int(i[-2:]))]\n",
        "    pourcentage_perdure = len(pourcentage_perdure[pourcentage_perdure['distinct_users_per_month+3'] >= 10])/len(pourcentage_perdure)\n",
        "    actifs_groups_courbe_SMB.loc[actifs_groups_courbe_SMB['tranches'] == i, '%actifs'] = pourcentage_perdure\n",
        "    actifs_groups_courbe_SMB.loc[actifs_groups_courbe_SMB['tranches'] == i, 'size'] = n\n",
        "    print(i, n, pourcentage_perdure)\n",
        "\n",
        "# Remplissage du % de conversations perdurant\n",
        "\n",
        "for i in actifs_groups_courbe_Middle['tranches'][0:8] :\n",
        "  if len(actifs_groups_Middle[(actifs_groups_Middle['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Middle['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])>0:\n",
        "    n = len(actifs_groups_Middle[(actifs_groups_Middle['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Middle['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])\n",
        "    pourcentage_perdure = actifs_groups_Middle[(actifs_groups_Middle['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Middle['distinct_users_per_month'] < int(i[-2:]))]\n",
        "    pourcentage_perdure = len(pourcentage_perdure[pourcentage_perdure['distinct_users_per_month+3'] >= 10])/len(pourcentage_perdure)\n",
        "    actifs_groups_courbe_Middle.loc[actifs_groups_courbe_Middle['tranches'] == i, '%actifs'] = pourcentage_perdure\n",
        "    actifs_groups_courbe_Middle.loc[actifs_groups_courbe_Middle['tranches'] == i, 'size'] = n\n",
        "    print(i, n, pourcentage_perdure)\n",
        "\n",
        "# Remplissage du % de conversations perdurant\n",
        "\n",
        "for i in actifs_groups_courbe_Strategic['tranches'][0:8] :\n",
        "  if len(actifs_groups_Strategic[(actifs_groups_Strategic['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Strategic['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])>0:\n",
        "    n = len(actifs_groups_Strategic[(actifs_groups_Strategic['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Strategic['distinct_users_per_month'] < int(i[-2:]))].iloc[:,5])\n",
        "    pourcentage_perdure = actifs_groups_Strategic[(actifs_groups_Strategic['distinct_users_per_month'] >= int(i[:2])) & (actifs_groups_Strategic['distinct_users_per_month'] < int(i[-2:]))]\n",
        "    pourcentage_perdure = len(pourcentage_perdure[pourcentage_perdure['distinct_users_per_month+3'] >= 10])/len(pourcentage_perdure)\n",
        "    actifs_groups_courbe_Strategic.loc[actifs_groups_courbe_Strategic['tranches'] == i, '%actifs'] = pourcentage_perdure\n",
        "    actifs_groups_courbe_Strategic.loc[actifs_groups_courbe_Strategic['tranches'] == i, 'size'] = n\n",
        "    print(i, n, pourcentage_perdure)"
      ],
      "metadata": {
        "id": "k3ZzDz_WB5Tf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# On supprime les dernières tranches qui ne sont pas assez fournies\n",
        "\n",
        "actifs_groups_courbe_SMB = actifs_groups_courbe_SMB[:-3]\n",
        "actifs_groups_courbe_Middle = actifs_groups_courbe_Middle[:-3]\n",
        "actifs_groups_courbe_Strategic = actifs_groups_courbe_Strategic[:-3]\n",
        "print(actifs_groups_courbe_SMB, \" \", \" \", actifs_groups_courbe_Middle, \" \", \" \", actifs_groups_courbe_Strategic, \" \", \" \")"
      ],
      "metadata": {
        "id": "ILDmvkgXtaE5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"actifs_groups_courbe_SMB.to_csv('actifs_groups_courbe_SMB.csv', index=False)\n",
        "files.download('actifs_groups_courbe_SMB.csv')\n",
        "actifs_groups_courbe_Middle.to_csv('actifs_groups_courbe_Middle.csv', index=False)\n",
        "files.download('actifs_groups_courbe_Middle.csv')\n",
        "actifs_groups_courbe_Strategic.to_csv('actifs_groups_courbe_Strategic.csv', index=False)\n",
        "files.download('actifs_groups_courbe_Strategic.csv')\"\"\""
      ],
      "metadata": {
        "id": "MPDDsw2fB5Tf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Recherche de conversations modèles afin de visualiser les bonnes pratiques"
      ],
      "metadata": {
        "id": "fJkaz7MVxEut"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_users_per_group_test.head()"
      ],
      "metadata": {
        "id": "s-rf9nCYx9T-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# On recherche une conversation, à un mois donné, qui respecte les conditions suivantes :\n",
        "# Pas le premier mois en activité\n",
        "# >= 20 membres dans la conversation\n",
        "# >= 20% d'actifs à M0\n",
        "# >= 20% d'actifs à M+3\n",
        "# >= 50 employés dans l'entreprise\n",
        "\n",
        "df_best_practices = df_users_per_group_test.copy()#[df_users_per_group_test['Total Employees'] != 'No_data']\n",
        "#df_best_practices['Total Employees'] = df_best_practices['Total Employees'].astype(int)\n",
        "df_best_practices = df_best_practices[(df_best_practices['registered'] >= 10) & (df_best_practices['interactions_per_month'] >= 10)]# & (df_best_practices['Total Employees'] >= 50)]\n",
        "\n",
        "df_best_practices_bis = pd.DataFrame(columns=df_best_practices.columns)\n",
        "df_best_practices_bis['year_month+3'] = \"\"\n",
        "df_best_practices_bis['distinct_users_per_month+3'] = \"\"\n",
        "\n",
        "# Pour chaque conversation\n",
        "for conv_id in df_best_practices['lowest_level_id'].unique():\n",
        "    conv_data = df_best_practices[df_best_practices['lowest_level_id'] == conv_id]\n",
        "    for conv_mois in conv_data['year_month'] :\n",
        "      if conv_data.loc[conv_data['year_month'] == conv_mois, 'distinct_users_per_month'].values[0] >= 20:\n",
        "        df_best_practices_bis = df_best_practices_bis.append(conv_data[conv_data['year_month'] == conv_mois])\n",
        "        date_obj = datetime.strptime(conv_mois, '%Y-%m-%d').date()\n",
        "        conv_next_month = date_obj + relativedelta(months=3)\n",
        "        conv_next_month = conv_next_month.strftime('%Y-%m-%d')\n",
        "        if conv_next_month not in conv_data['year_month'].values:\n",
        "          continue\n",
        "        next_month_value = conv_data[conv_data['year_month'] == conv_next_month]['distinct_users_per_month'].iloc[0]\n",
        "        if next_month_value >= 10 :\n",
        "          df_best_practices_bis.loc[(df_best_practices_bis['lowest_level_id'] == conv_id) & (df_best_practices_bis['year_month'] == conv_mois), 'year_month+3'] = conv_next_month\n",
        "          df_best_practices_bis.loc[(df_best_practices_bis['lowest_level_id'] == conv_id) & (df_best_practices_bis['year_month'] == conv_mois), 'distinct_users_per_month+3'] = next_month_value\n",
        "df_best_practices_bis.dropna(inplace=True)\n",
        "\n",
        "#print(df_best_practices)"
      ],
      "metadata": {
        "id": "1VD1IjJCxLxQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_best_practices_bis)\n",
        "\"\"\"df_best_practices_bis.to_csv('best_practices.csv', index=False)\n",
        "files.download(\"best_practices.csv\")\"\"\""
      ],
      "metadata": {
        "id": "tZdEZamV4A-C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Donc à priori seulement 1 conversation d'Unilabs correspond à ces critères, il faut maintenant rentrer dans son détail afin d'en tirer des enseignements*"
      ],
      "metadata": {
        "id": "veR80HiK4kWF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Algorithme de prédiction faisant le lien entre les caractéristiques d'un groupe et sa continuité"
      ],
      "metadata": {
        "id": "8AyKAuNHwlWh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Modèle de régression linéaire afin de prédire 'interactions_per_month' grâce aux colonnes :\n",
        "# 'registered', 'Account Category' et 'Company_Language'\n",
        "\n",
        "# Séparation des données en ensembles de formation et de test\n",
        "X = df_groups_actives[['registered', 'Account Category', 'Company_Language']]\n",
        "y = df_groups_actives['interactions_per_month']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Normalisation des données si nécessaire\n",
        "\n",
        "# Entraînement du modèle\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Évaluation du modèle\n",
        "y_pred = model.predict(X_test)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print('Mean squared error:', mse)"
      ],
      "metadata": {
        "id": "h8dr80Nc4ZW7"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
